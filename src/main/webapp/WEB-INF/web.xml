<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  version="3.0">


  <display-name>SkylineRate</display-name>
  
   <!-- 加载顺序为：context- param -> listener -> filter -> servlet ，而同个类型之间的实际程序调用的时候的顺序是根据 对应的 mapping 的顺序进行调用的。   -->

 <context-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>classpath:app*.xml</param-value>
 </context-param>

<context-param>
<param-name>version</param-name>
<param-value>1.8.9</param-value>
</context-param>


<context-param>
<param-name>superAdmin</param-name>
<param-value>admin</param-value>
</context-param>
 
 <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>
    
<listener>
        <listener-class>com.skyline.listener.SessionListener</listener-class>
 </listener>
   
   <!--  *********************** 编码过滤器**********************   -->
  <!-- 解决中文从tomcat/jsp 提交 写入utf8的mysql数据库编码乱码问题     避免web页面之间参数传递出现乱码 -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf8</param-value>
    </init-param>
 </filter>
 
 <filter-mapping>
      <filter-name>encodingFilter</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping>
  
   <!--  *********************** session过滤器**********************   -->
   <filter>
   	<filter-name>sessionFilter</filter-name>
   <filter-class>com.skyline.filter.SessionCheck</filter-class>
   </filter>
   <!--  url 不能配置为/*,这样也会拦截js 和css -->
   <filter-mapping>
   	<filter-name>sessionFilter</filter-name>
	<url-pattern>*.do</url-pattern>
  <!--  	<url-pattern>*.do,*.jsp</url-pattern>  注意,这种格式不生效 -->
   </filter-mapping>
   <!-- 多个过滤器匹配需求,就要分开写多个filter-mapping ,
  或许如果filter-mapping 的里的url-pattern 不写或者不太正确,例如写了俩个url-pattern 到同一个mapping 中(这种情况估计相当于没写url-pattern)
   filter-mapping 就默认匹配所有的链接,所以连login.jsp 上的css 也拦截了.
    -->
   <filter-mapping>
   		<filter-name>sessionFilter</filter-name>
    	<url-pattern>*.jsp</url-pattern>
  <!--  	<url-pattern>*.do,*.jsp</url-pattern>  注意,这种格式不生效 -->
   </filter-mapping>
   
   
   <!--  *********************** 权限过滤器**********************   -->
  <filter>
  	 	<filter-name>powersFilter</filter-name>
   		<filter-class>com.skyline.filter.PowersCheck</filter-class>
   		<init-param>  
		<param-name>excludeUrl</param-name>  
		<param-value>/user/login.do,/user/logout.do</param-value>  
</init-param>  

   		
  </filter>
   <!--  url 不能配置为/*,这样也会拦截js 和css -->
   <filter-mapping>
   		<filter-name>powersFilter</filter-name>
		<url-pattern>*.do</url-pattern>
   </filter-mapping>
   
   
   
   
   
   
   
   
   <!-- 如果用了struts ，就不用下面这个spring servlet 了，因为请求都交给了struts 来处理-->
   
 <servlet> 
        <servlet-name>spring</servlet-name> 
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> 
              <load-on-startup>1</load-on-startup> <!--  这个顺序是servlet 之间的，读取配置时，servlet 的加载顺序 -->
</servlet>

  <servlet-mapping>
       	<servlet-name>spring</servlet-name>
		<url-pattern>*.do</url-pattern>
</servlet-mapping>
 

 
<!--  openSessionInViewFilter 只要是用来解决赖加载问题，在懒加载完成之前让session 一直保持打开-->
  <filter>  
     <filter-name>openSessionInViewFilter</filter-name>  
    <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>  
   	<init-param>  
       <param-name>singleSession</param-name>  
       <param-value>true</param-value>  
    </init-param>  
  </filter>  
 
  <filter-mapping>  
     <filter-name>openSessionInViewFilter</filter-name>  
      <url-pattern>/powers/*</url-pattern>  
  </filter-mapping>
  
  
    <filter-mapping>  
     <filter-name>openSessionInViewFilter</filter-name>  
      <url-pattern>/user/*</url-pattern>  
  </filter-mapping>

  
  <error-page>
  <error-code>404</error-code>
  <location>/error/to404.do</location>
  </error-page>
  
  <!--  	http 抛出的异常如果没有被单独处理则被web.xml 中配置的logJspExceptionToFile.jsp页面被统一处理-->
  <error-page>
  <exception-type>javax.servlet.ServletException</exception-type>
  <location>/error/logJspExceptionToFile.do</location>
  </error-page>

  
  
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>